package repositories;

import repositories.mappers.IMapResultSetToEntity;
import repositories.uow.IUnitOfWork;
import domain.User;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

// admin account
// INSERT INTO user (login, email, role, password) VALUES ('admin', 'admin@admin.pl', 2, 'd033e22ae348aeb5660fc2140aec35850c4da997'); // password: admin

public class UserRepository extends RepositoryBase<User> implements IUserRepository{

	protected PreparedStatement withLoginAndEmail;
	protected PreparedStatement withLoginAndPassword;
	protected PreparedStatement listUsersWithoutAdmins;
	protected PreparedStatement listUsers;
	protected PreparedStatement withId;


	public UserRepository(Connection connection,
						  IMapResultSetToEntity<User> mapper,
						  IUnitOfWork uow) {

		super(connection, mapper, uow);
		try {
			withLoginAndEmail = connection.prepareStatement("SELECT * FROM user WHERE login = ? and email = ?");
			withLoginAndPassword = connection.prepareStatement("SELECT * FROM user WHERE login = ? and password = ?");
			listUsersWithoutAdmins = connection.prepareStatement("SELECT * FROM user WHERE role != ? ORDER BY id");
			listUsers = connection.prepareStatement("SELECT * FROM user ORDER BY id");
			withId = connection.prepareStatement("SELECT * FROM user WHERE id = ?");

		} catch (SQLException e) {
			e.printStackTrace();
		}
	}

	public void setUpdateQuery(User u) throws SQLException {
		update.setString(1, u.getLogin());
		update.setString(2, u.getPassword());
		update.setString(3, u.getEmail());
		update.setInt(4, u.getRole());
		update.setInt(5, u.getId());
	}

	public void setInsertQuery(User u) throws SQLException {
		insert.setString(1, u.getLogin());
		insert.setString(2, u.getPassword());
		insert.setString(3, u.getEmail());
	}

	@Override
	protected String tableName() {
		return "user";
	}

	protected String createTableSql() {
		return "CREATE TABLE user ("
				+ "id bigint GENERATED BY DEFAULT AS IDENTITY,"
				+ "login VARCHAR(20)," + "password VARCHAR(50),"
				+ "email VARCHAR(50)," + "role INTEGER DEFAULT 0"
				+ ")";
	}

	protected String insertSql() {
		return "INSERT INTO user(login, password, email) VALUES (?,?,?)";
	}

	protected String updateSql() {
		return "UPDATE user SET login = ?, password = ?, email = ?, role = ? WHERE id = ?";
	}

	public List<User> listUsersWithoutAdmins(){
		try {
			listUsersWithoutAdmins.setInt(1, User.RoleAdmin);
		} catch (SQLException ex) {
			ex.printStackTrace();
		}
		return getList(listUsersWithoutAdmins);
	}

	public List<User> listUsers(){
		return getList(listUsers);
	}

	public User withId(int id) {
		try {
			withId.setInt(1, id);
		} catch (SQLException ex) {
			ex.printStackTrace();
		}
		return getOne(withId);
	}

	public User withLoginAndEmail(String login, String email) {
		try {
			withLoginAndEmail.setString(1, login);
			withLoginAndEmail.setString(2, email);
		} catch (SQLException ex) {
			ex.printStackTrace();
		}
		return getOne(withLoginAndEmail);
	}

	public User withLoginAndPassword(String login, String password) {
		try {
			withLoginAndPassword.setString(1, login);
			password = User.encryptPassword(password);
			withLoginAndPassword.setString(2, password);
		} catch (SQLException ex) {
			ex.printStackTrace();
		}
		return getOne(withLoginAndPassword);
	}
}
